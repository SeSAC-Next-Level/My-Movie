CREATE DATABASE IF NOT EXISTS e_lecture DEFAULT CHARACTER SET = 'utf8mb4';
use e_lecture;
CREATE TABLE IF NOT EXISTS 과목 (
    과목ID INT AUTO_INCREMENT PRIMARY KEY,
    과목이름 VARCHAR(10) NOT NULL
);

create Table IF NOT EXISTS 유저 (
    유저ID INT AUTO_INCREMENT PRIMARY KEY,
    아이디 VARCHAR(15) NOT NULL,
    닉네임 VARCHAR(10) NOT NULL,
    비밀번호 VARCHAR(20) NOT NULL,
    이름 VARCHAR(16) NOT NULL,
    가입날짜 DATETIME,
    휴대폰번호 VARCHAR(12) NOT NULL,
    강사여부 BOOLEAN
);



CREATE Table IF NOT EXISTS 강사 (
    강사ID INT AUTO_INCREMENT PRIMARY KEY,
    유저ID INT,
    경력 VARCHAR(1000),
    Foreign Key (유저ID) REFERENCES 유저 (유저ID) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS 강좌 (
    강좌ID INT AUTO_INCREMENT PRIMARY KEY,
    강사ID INT NOT NULL,
    과목ID INT NOT NULL,
    제목 VARCHAR(255) NOT NULL,
    개설일 DATETIME,
    시작일 DATETIME,
    종료일 DATETIME,
    개요 VARCHAR(500),
    FOREIGN KEY (강사ID) REFERENCES 강사 (강사ID),
    FOREIGN KEY (과목ID) REFERENCES 과목 (과목ID)
);
CREATE Table IF NOT EXISTS 수강생 (
    수강생ID INT AUTO_INCREMENT PRIMARY KEY,
    유저ID INT,
    Foreign Key (유저ID) REFERENCES 유저 (유저ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS 강좌QnA (
    강좌QnAID INT AUTO_INCREMENT PRIMARY KEY, -- 기본 키 (자동 증가)
    강좌ID INT NOT NULL, -- 강좌 테이블의 외래 키
    유저ID INT NOT NULL, -- 유저 테이블의 외래 키
    제목 VARCHAR(255) NOT NULL, -- 제목 필드
    내용 TEXT, -- 내용 필드
    작성시간 DATETIME NOT NULL, -- 작성 시간
    FOREIGN KEY (유저ID) REFERENCES 유저 (유저ID) -- 유저 테이블과의 외래 키 관계
    ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (강좌ID) REFERENCES 강좌 (강좌ID) -- 유저 테이블과의 외래 키 관계
    ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS 강좌QnA덧글 (
    강좌QnA덧글ID INT AUTO_INCREMENT PRIMARY KEY, -- 덧글 고유 ID
    강좌QnAID INT NOT NULL, -- 강좌 QnA 테이블의 외래 키
    유저ID INT NOT NULL, -- 유저 테이블의 외래 키
    내용 VARCHAR(255) NOT NULL, -- 덧글 내용
    작성시간 DATETIME NOT NULL, -- 작성 시간
    FOREIGN KEY (강좌QnAID) REFERENCES 강좌QnA (강좌QnAID) -- 강좌QnA와 외래 키 관계
    ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (유저ID) REFERENCES 유저 (유저ID) -- 유저 테이블과 외래 키 관계
    ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS 강의 (
    강의ID INT AUTO_INCREMENT PRIMARY KEY, -- 기본 키
    강좌ID INT NOT NULL, -- 외래 키 (강좌 테이블 참조)
    제목 VARCHAR(255) NOT NULL, -- 제목
    영상경로 VARCHAR(255), -- 영상 경로
    영상시간 TIMESTAMP, -- 영상 시간
    FOREIGN KEY (강좌ID) REFERENCES 강좌(강좌ID) ON DELETE CASCADE ON UPDATE CASCADE -- 외래 키 참조
);

CREATE TABLE IF NOT EXISTS 강의과제 (
    강의과제ID INT AUTO_INCREMENT PRIMARY KEY,
    강의ID INT NOT NULL,
    제목 VARCHAR(255) NOT NULL,
    내용 VARCHAR(255),
    FOREIGN KEY (강의ID) REFERENCES 강의 (강의ID) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE IF NOT EXISTS 과제제출 (
    과제제출ID INT AUTO_INCREMENT PRIMARY KEY,
    강의과제ID INT NOT NULL,
    유저ID INT NOT NULL,
    제출여부 BOOLEAN NOT NULL,
    FOREIGN KEY (강의과제ID) REFERENCES 강의과제 (강의과제ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (유저ID) REFERENCES 유저 (유저ID) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS 강의자료 (
    강의자료ID INT AUTO_INCREMENT PRIMARY KEY,
    강의ID INT NOT NULL,
    이름 VARCHAR(255) NOT NULL,
    경로 VARCHAR(500) NOT NULL,
    FOREIGN KEY (강의ID) REFERENCES 강의 (강의ID)
);

CREATE TABLE IF NOT EXISTS 수강평 (
  수강평ID INT AUTO_INCREMENT PRIMARY KEY,
  강좌ID INT NOT NULL,
  유저ID INT NOT NULL,
  제목 VARCHAR(255),
  내용 VARCHAR(1000),
  점수 INT NOT NULL,
  작성시간 DATETIME NOT NULL,
  FOREIGN KEY (강좌ID) REFERENCES 강좌(강좌ID),
  FOREIGN KEY (유저ID) REFERENCES 유저(유저ID),
  CHECK (점수 BETWEEN 1 AND 10)
);
CREATE TABLE IF NOT EXISTS 수강평덧글 (
    수강평덧글ID INT AUTO_INCREMENT PRIMARY KEY,
    수강평ID INT NOT NULL,
    유저ID INT NOT NULL,
    제목 VARCHAR(255),
    내용 VARCHAR(1000),
    작성시간 DATETIME NOT NULL,
    FOREIGN KEY (수강평ID) REFERENCES 수강평 (수강평ID),
    FOREIGN KEY (유저ID) REFERENCES 유저 (유저ID)
);

CREATE TABLE IF NOT EXISTS 강사평 (
    강사평ID INT AUTO_INCREMENT PRIMARY KEY,
    강사ID INT NOT NULL,
    유저ID INT NOT NULL,
    제목 VARCHAR(255),
    내용 VARCHAR(1000),
    점수 INT NOT NULL,
    작성시간 DATETIME NOT NULL,
    FOREIGN KEY (강사ID) REFERENCES 강사 (강사ID),
    FOREIGN KEY (유저ID) REFERENCES 유저 (유저ID),
    CHECK (점수 BETWEEN 1 AND 10)
);



CREATE TABLE IF NOT EXISTS 게시글 (
  게시글ID INT AUTO_INCREMENT PRIMARY KEY,
  유저ID INT NOT NULL,
  제목 VARCHAR(255) NOT NULL,
  내용 VARCHAR(2000),
  작성시간 DATETIME NOT NULL,
  종류 ENUM('질문답변', '스터디모집'),
  FOREIGN KEY (유저ID) REFERENCES 유저(유저ID)
);

CREATE TABLE IF NOT EXISTS 덧글 (
  덧글ID INT AUTO_INCREMENT PRIMARY KEY,
  게시글ID INT NOT NULL,
  유저ID INT NOT NULL,
  부모덧글ID INT,
  제목 VARCHAR(255) NOT NULL,
  내용 VARCHAR(2000),
  작성시간 DATETIME NOT NULL,
  FOREIGN KEY (게시글ID) REFERENCES 게시글(게시글ID),
  FOREIGN KEY (유저ID) REFERENCES 유저(유저ID),
  FOREIGN KEY (부모덧글ID) REFERENCES 덧글(덧글ID)
);

CREATE TABLE IF NOT EXISTS 관심강사 (
  관심강사ID INT AUTO_INCREMENT PRIMARY KEY,
  강사ID INT NOT NULL,
  유저ID INT NOT NULL,
  취소여부 BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (강사ID) REFERENCES 강사(강사ID),
  FOREIGN KEY (유저ID) REFERENCES 유저(유저ID)
);


CREATE TABLE IF NOT EXISTS 관심강좌 (
  관심강좌ID INT AUTO_INCREMENT PRIMARY KEY,
  강좌ID INT NOT NULL,
  유저ID INT NOT NULL,
  취소여부 BOOLEAN NOT NULL DEFAULT FALSE,
  FOREIGN KEY (강좌ID) REFERENCES 강좌(강좌ID),
  FOREIGN KEY (유저ID) REFERENCES 유저(유저ID)
);

CREATE TABLE IF NOT EXISTS 수강강좌 (
  수강강좌ID INT AUTO_INCREMENT PRIMARY KEY,
  강좌ID INT NOT NULL,
  유저ID INT NOT NULL,
  기한 DATETIME NOT NULL,
  FOREIGN KEY (강좌ID) REFERENCES 강좌(강좌ID),
  FOREIGN KEY (유저ID) REFERENCES 유저(유저ID)
);

CREATE TABLE IF NOT EXISTS 구매강좌 (
  구매강좌ID INT AUTO_INCREMENT PRIMARY KEY,
  강좌ID INT NOT NULL,
  유저ID INT NOT NULL,
  구매일 DATETIME NOT NULL,
  구매상태 ENUM('대기', '완료', '취소'),
  FOREIGN KEY (강좌ID) REFERENCES 강좌(강좌ID),
  FOREIGN KEY (유저ID) REFERENCES 유저(유저ID)
);
